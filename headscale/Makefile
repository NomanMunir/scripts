# =============================================================================
# Headscale Docker Management Makefile
# =============================================================================
# Author: GitHub Copilot
# Description: Simplifies common Headscale operations with organized sections

.PHONY: help up down restart status logs logs-follow clean backup restore shell exec users create-user list-users delete-user preauthkey routes health

# =============================================================================
# HELP & DOCUMENTATION
# =============================================================================

# Default target
help: ## Show this help message
	@echo "üéØ Headscale Docker Management Commands"
	@echo "========================================"
	@echo ""
	@echo "üìö QUICK START:"
	@echo "  make quick-setup           # Complete setup with default user"
	@echo "  make connect-help          # Show client connection guide"
	@echo ""
	@echo "üöÄ SERVICE MANAGEMENT:"
	@echo "  up                         # Start all services"
	@echo "  down                       # Stop all services"
	@echo "  restart                    # Restart all services"
	@echo "  status                     # Show service status"
	@echo "  update                     # Pull latest images and restart"
	@echo ""
	@echo "üë• USER MANAGEMENT:"
	@echo "  list-users                 # List all users"
	@echo "  create-user USER=name      # Create a new user"
	@echo "  delete-user USER=name      # Delete a user"
	@echo ""
	@echo "üîë PRE-AUTH KEYS:"
	@echo "  preauthkey USERID=1        # Generate a pre-auth key"
	@echo "  list-preauthkeys USERID=1  # List pre-auth keys for a user"
	@echo ""
	@echo "üíª NODE MANAGEMENT:"
	@echo "  list-nodes                 # List all nodes"
	@echo "  node-info NODE=id          # Show detailed node info"
	@echo "  delete-node NODE=id        # Delete a node"
	@echo ""
	@echo "üìã MONITORING & LOGS:"
	@echo "  logs                       # Show recent logs"
	@echo "  logs-follow                # Follow logs in real-time"
	@echo "  logs-headscale             # Show headscale logs only"
	@echo "  health                     # Check service health"
	@echo ""
	@echo "üõ†Ô∏è  MAINTENANCE:"
	@echo "  backup                     # Create backup"
	@echo "  shell                      # Open shell in container"
	@echo "  clean                      # Remove all data (DESTRUCTIVE!)"
	@echo ""
	@echo "üí° EXAMPLES:"
	@echo "  make create-user USER=john"
	@echo "  make preauthkey USERID=1"
	@echo "  make backup"
	@echo "  make logs-follow"

connect-help: ## Show detailed client connection instructions
	@echo "üì± Client Connection Guide"
	@echo "=========================="
	@echo ""
	@echo "1Ô∏è‚É£  Create a user (if not done already):"
	@echo "   make create-user USER=myuser"
	@echo ""
	@echo "2Ô∏è‚É£  Generate a pre-auth key:"
	@echo "   make preauthkey USERID=1"
	@echo ""
	@echo "3Ô∏è‚É£  On your client device, install Tailscale and run:"
	@echo "   tailscale up --login-server http://$(shell hostname -I | awk '{print $$1}'):8080 --authkey YOUR_KEY"
	@echo ""
	@echo "4Ô∏è‚É£  Verify connection:"
	@echo "   make list-nodes"
	@echo ""
	@echo "üìç Your Headscale server is accessible at:"
	@echo "   http://$(shell hostname -I | awk '{print $$1}'):8080"

# =============================================================================
# SERVICE MANAGEMENT
# =============================================================================

up: ## Start all services
	@echo "üöÄ Starting Headscale services..."
	docker-compose up -d
	@echo "‚úÖ Services started. Use 'make status' to check."

down: ## Stop all services
	@echo "üõë Stopping Headscale services..."
	docker-compose down
	@echo "‚úÖ Services stopped."

restart: ## Restart all services
	@echo "üîÑ Restarting Headscale services..."
	docker-compose restart
	@echo "‚úÖ Services restarted."

status: ## Show service status
	@echo "üìä Service Status"
	@echo "================="
	@docker-compose ps

update: ## Pull latest images and restart
	@echo "üîÑ Updating Headscale..."
	@docker-compose pull
	@make restart
	@echo "‚úÖ Update completed!"

quick-setup: ## Complete setup with default admin user
	@echo "üöÄ Quick Headscale Setup"
	@echo "========================"
	@make up
	@echo "‚è≥ Waiting for services to be ready..."
	@sleep 10
	@make create-user USER=admin
	@echo ""
	@echo "üéâ Setup complete!"
	@echo "Next steps:"
	@echo "1. Generate a pre-auth key: make preauthkey USERID=1"
	@echo "2. Connect your devices using the generated key"

# =============================================================================
# USER MANAGEMENT
# =============================================================================

users: list-users ## Alias for list-users

list-users: ## List all users
	@echo "üë• Headscale Users"
	@echo "=================="
	@docker exec -it headscale headscale users list || echo "‚ùå Failed to list users. Is Headscale running?"

create-user: ## Create a new user (usage: make create-user USER=username)
	@if [ -z "$(USER)" ]; then \
		echo "‚ùå Error: USER parameter is required"; \
		echo "Usage: make create-user USER=username"; \
		exit 1; \
	fi
	@echo "üë§ Creating user: $(USER)"
	@docker exec -it headscale headscale users create $(USER)
	@echo "‚úÖ User '$(USER)' created successfully!"
	@echo ""
	@echo "üì± Next Steps:"
	@echo "=============="
	@echo "1Ô∏è‚É£  Generate a pre-auth key for this user:"
	@echo "   make preauthkey USERID=1"
	@echo ""
	@echo "2Ô∏è‚É£  On your client device, install Tailscale and run:"
	@echo "   sudo tailscale up --login-server http://maximum-logically-sunbird.ngrok-free.app --authkey YOUR_AUTHKEY"
	@echo ""
	@echo "   üìù Replace YOUR_AUTHKEY with the key generated in step 1"
	@echo "   üìù Keep the --login-server URL exactly as shown above"
	@echo ""
	@echo "3Ô∏è‚É£  Verify the connection:"
	@echo "   make list-nodes"
	@echo ""

delete-user: ## Delete a user (usage: make delete-user USER=username)
	@if [ -z "$(USER)" ]; then \
		echo "‚ùå Error: USER parameter is required"; \
		echo "Usage: make delete-user USER=username"; \
		exit 1; \
	fi
	@echo "üóëÔ∏è  Deleting user: $(USER)"
	@echo "‚ö†Ô∏è  This will also delete all nodes for this user!"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@docker exec -it headscale headscale users destroy --name $(USER) --force
	@echo "‚úÖ User '$(USER)' deleted!"

# =============================================================================
# PRE-AUTHENTICATION KEYS
# =============================================================================

preauthkey: ## Generate a pre-auth key (usage: make preauthkey [USERID=1])
	@echo "üîë Generate Pre-authentication Key"
	@echo "=================================="
	@if [ -z "$(USERID)" ]; then \
		echo "üë• Available Users:"; \
		docker exec -it headscale headscale users list; \
		echo ""; \
		echo "Usage: make preauthkey USERID=1"; \
		echo ""; \
	else \
		echo "üîë Generating 24h reusable pre-auth key for User ID: $(USERID)"; \
		docker exec -it headscale headscale preauthkeys create --user $(USERID) --expiration 24h --reusable; \
		echo ""; \
		echo "üì± Connection Instructions:"; \
		echo "==========================="; \
		echo "Copy the authkey from above and run this command on your client device:"; \
		echo ""; \
		echo "   sudo tailscale up --login-server http://maximum-logically-sunbird.ngrok-free.app --authkey YOUR_AUTHKEY"; \
		echo ""; \
		echo "   üìù Replace YOUR_AUTHKEY with the key generated above"; \
		echo "   üìù Keep the --login-server URL exactly as shown"; \
		echo ""; \
		echo "‚úÖ After connecting, verify with: make list-nodes"; \
		echo ""; \
	fi

list-preauthkeys: ## List pre-auth keys for a user (usage: make list-preauthkeys USERID=1)
	@echo "üîë Pre-authentication Keys"
	@echo "=========================="
	@if [ -z "$(USERID)" ]; then \
		echo "‚ùå Error: USERID parameter is required"; \
		echo ""; \
		echo "Usage: make list-preauthkeys USERID=1"; \
		exit 1; \
	else \
		echo "üìã Listing pre-auth keys for User ID: $(USERID)"; \
		docker exec -it headscale headscale preauthkeys list --user $(USERID); \
	fi

# =============================================================================
# NODE MANAGEMENT
# =============================================================================

nodes: list-nodes ## Alias for list-nodes

list-nodes: ## List all nodes
	@echo "üíª Headscale Nodes"
	@echo "=================="
	@docker exec -it headscale headscale nodes list

node-info: ## Show detailed info for a node (usage: make node-info NODE=node_id)
	@if [ -z "$(NODE)" ]; then \
		echo "‚ùå Error: NODE parameter is required"; \
		echo "Usage: make node-info NODE=node_id"; \
		exit 1; \
	fi
	@echo "üíª Node Information for ID: $(NODE)"
	@echo "===================================="
	@docker exec -it headscale headscale nodes get $(NODE)

delete-node: ## Delete a node (usage: make delete-node NODE=node_id)
	@if [ -z "$(NODE)" ]; then \
		echo "‚ùå Error: NODE parameter is required"; \
		echo "Usage: make delete-node NODE=node_id"; \
		exit 1; \
	fi
	@echo "üóëÔ∏è  Deleting node: $(NODE)"
	@docker exec -it headscale headscale nodes delete --identifier $(NODE) --force

# =============================================================================
# ROUTES MANAGEMENT
# =============================================================================

routes: list-routes ## Alias for list-routes

list-routes: ## List all routes
	@echo "üõ£Ô∏è  Routes"
	@echo "=========="
	@docker exec -it headscale headscale routes list

# =============================================================================
# MONITORING & LOGGING
# =============================================================================

logs: ## Show recent logs from all services
	@echo "üìã Recent Logs"
	@echo "=============="
	docker-compose logs --tail=50

logs-follow: ## Follow logs in real-time
	@echo "üìã Following logs (Ctrl+C to stop)"
	@echo "=================================="
	docker-compose logs -f

logs-headscale: ## Show logs from headscale service only
	@echo "üìã Headscale Logs"
	@echo "================="
	docker-compose logs --tail=50 headscale

logs-db: ## Show logs from database service only
	@echo "üìã Database Logs"
	@echo "================"
	docker-compose logs --tail=50 postgres

dev-logs: ## Show detailed logs with debug info
	@echo "üêõ Debug Logs"
	@echo "============="
	docker-compose logs -f --tail=100

health: ## Check service health and connectivity
	@echo "üè• Health Check"
	@echo "==============="
	@echo "üîç Checking Headscale API..."
	@curl -s -o /dev/null -w "   Status: %{http_code}\n" http://localhost:8080/health 2>/dev/null || echo "   Status: Not responding"
	@echo "üìä Checking Metrics endpoint..."
	@curl -s -o /dev/null -w "   Status: %{http_code}\n" http://localhost:9090/metrics 2>/dev/null || echo "   Status: Not responding"
	@echo ""
	@make status

# =============================================================================
# MAINTENANCE & ADMINISTRATION
# =============================================================================

shell: ## Open a shell in the headscale container
	@echo "üêö Opening shell in Headscale container..."
	@docker exec -it headscale sh

exec: ## Execute a command in headscale container (usage: make exec CMD="command")
	@if [ -z "$(CMD)" ]; then \
		echo "‚ùå Error: CMD parameter is required"; \
		echo "Usage: make exec CMD=\"headscale users list\""; \
		exit 1; \
	fi
	@docker exec -it headscale $(CMD)

backup: ## Create a backup of configuration and data
	@echo "üíæ Creating Backup"
	@echo "=================="
	@TIMESTAMP=$$(date +%Y%m%d_%H%M%S); \
	mkdir -p backups; \
	tar -czf backups/headscale_backup_$$TIMESTAMP.tar.gz config/ data/ pgdata/ docker-compose.yml Makefile; \
	echo "‚úÖ Backup created: backups/headscale_backup_$$TIMESTAMP.tar.gz"

restore: ## Restore from backup (usage: make restore BACKUP=backup_file.tar.gz)
	@if [ -z "$(BACKUP)" ]; then \
		echo "‚ùå Error: BACKUP parameter is required"; \
		echo "Usage: make restore BACKUP=backups/headscale_backup_20240101_120000.tar.gz"; \
		exit 1; \
	fi
	@if [ ! -f "$(BACKUP)" ]; then \
		echo "‚ùå Error: Backup file $(BACKUP) not found"; \
		exit 1; \
	fi
	@echo "üîÑ Restoring from backup: $(BACKUP)"
	@echo "‚ö†Ô∏è  This will overwrite current configuration and data!"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@make down
	@tar -xzf $(BACKUP)
	@make up
	@echo "‚úÖ Restore completed!"

clean: ## Remove all containers, volumes, and networks (DESTRUCTIVE!)
	@echo "üßπ Complete Cleanup"
	@echo "==================="
	@echo "‚ö†Ô∏è  This will remove ALL Headscale data permanently!"
	@echo "üìã Make sure you have a backup!"
	@read -p "Type 'DELETE' to confirm: " confirm && [ "$$confirm" = "DELETE" ] || exit 1
	@docker-compose down -v --remove-orphans
	@docker network prune -f
	@sudo rm -rf data/ pgdata/
	@echo "‚úÖ Cleanup completed!"

# =============================================================================
# CONFIGURATION & TROUBLESHOOTING
# =============================================================================

config-validate: ## Validate headscale configuration
	@echo "‚úÖ Validating Configuration"
	@echo "==========================="
	@docker exec -it headscale headscale configtest || echo "‚ùå Configuration validation failed"

config-show: ## Show current configuration file
	@echo "‚öôÔ∏è  Current Configuration"
	@echo "========================="
	@cat config/config.yaml

network-info: ## Show docker network information
	@echo "üåê Network Information"
	@echo "====================="
	@docker network ls | grep headscale
	@echo ""
	@docker network inspect headscale_headscale-net
